{"version":3,"sources":["Moveset/Moveset.js","Pokemon/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Moveset","props","className","label","moveset","split","map","move","index","trim","key","Pokemon","legacyQuickMove","this","currentMon","field_legacy_quick_moves","legacyChargeMove","field_legacy_charge_moves","specialQuickMove","quick_exclusive_moves","specialChargeMove","charge_exclusive_moves","number","title_1","alt","src","uri","React","Component","myDataSet","JSON","filter","obj","App","mon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6vyzBAiBeA,MAdf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,cACpB,0BAAMA,UAAU,aAAhB,QACA,4BACA,wBAAIA,UAAW,UAAUD,EAAMC,WAAYD,EAAME,OAChDF,EAAMG,QAAQC,MAAM,KAAKC,KAAI,SAACC,EAAMC,GACnC,MACoB,WAAhBD,EAAKE,OAAuB,KAAO,wBAAIP,UAAU,UAAUQ,IAAKF,GAAQD,EAAKE,cC+BxEE,E,iLAhCX,IAAIC,EAAkBC,KAAKZ,MAAMa,WAAWC,yBACxCC,EAAmBH,KAAKZ,MAAMa,WAAWG,0BACzCC,EAAmBL,KAAKZ,MAAMa,WAAWK,sBACzCC,EAAoBP,KAAKZ,MAAMa,WAAWO,uBAE9C,OACE,yBAAKnB,UAAU,QACb,0BAAMA,UAAU,SAAhB,IAA0BW,KAAKZ,MAAMa,WAAWQ,QAChD,uBAAGpB,UAAU,YAAYW,KAAKZ,MAAMa,WAAWS,SAC/C,yBAAKC,IAAI,OAAOtB,UAAU,WAAWuB,IAAKZ,KAAKZ,MAAMa,WAAWY,MAChE,6BACEd,EACA,yBAAKV,UAAU,sCACb,kBAAC,EAAD,CAASC,MAAM,oBAAoBC,QAASQ,EAAiBV,UAAU,iBAChE,KACTc,EACA,yBAAKd,UAAU,sCACb,kBAAC,EAAD,CAASC,MAAM,qBAAqBC,QAASY,EAAkBd,UAAU,kBAClE,KACTgB,EACA,yBAAKhB,UAAU,sCACb,kBAAC,EAAD,CAASC,MAAM,qBAAqBC,QAASc,EAAkBhB,UAAU,kBAClE,KACTkB,GAA2C,WAAtBA,EACrB,yBAAKlB,UAAU,sCACb,kBAAC,EAAD,CAASC,MAAM,sBAAsBC,QAASgB,EAAmBlB,UAAU,mBACpE,U,GA/BGyB,IAAMC,W,QCOxBC,G,MAFoBC,EAEQC,QAC9B,SAAAC,GAAG,MAAsC,KAAlCA,EAAIf,2BACyB,KAAjCe,EAAIjB,0BAC4B,KAA/BiB,EAAIX,wBAAiE,WAA/BW,EAAIX,wBACb,KAA9BW,EAAIb,0BAyCMc,E,8NA1BX,OACI,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAChB,+CAEA,6BACE,wBAAIA,UAAU,gDAEV2B,EACGvB,KAAI,SAAC4B,EAAK1B,GACX,OAEE,wBAAIE,IAAKF,GACP,kBAAC,EAAD,CAASA,MAAOA,EAAOM,WAAYoB,gB,GAzBzCN,aCNEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3638ce14.chunk.js","sourcesContent":["import React from 'react'\nimport './../Pokemon/Pokemon.css';\n\nfunction Moveset(props) {\n  return <div className=\"move-table\">\n    <span className=\"d-md-none\">&nbsp;</span>\n    <ul>\n    <li className={\"header \"+props.className}>{props.label}</li>\n    {props.moveset.split(\",\").map((move, index) => {\n      return (\n        ( move.trim() === \"Return\" ?  null : <li className=\"moveset\" key={index}>{move.trim()}</li> )\n      )\n    })}\n    </ul>\n  </div>\n}\n\nexport default Moveset;\n\n","import React from 'react'\nimport './Pokemon.css';\nimport Moveset from '../Moveset/Moveset';\n\nclass Pokemon extends React.Component {\n\n\n\n  render() {\n    let legacyQuickMove = this.props.currentMon.field_legacy_quick_moves;\n    let legacyChargeMove = this.props.currentMon.field_legacy_charge_moves;\n    let specialQuickMove = this.props.currentMon.quick_exclusive_moves;\n    let specialChargeMove = this.props.currentMon.charge_exclusive_moves;\n\n    return (\n      <div className=\"item\">\n        <span className=\"dexno\">#{this.props.currentMon.number}</span>\n        <p className=\"mon-name\">{this.props.currentMon.title_1}</p> \n        <img alt=\"icon\" className=\"img-icon\" src={this.props.currentMon.uri} />\n        <br/>\n        { legacyQuickMove ?\n          <div className=\"col-10 col-md-4 move-table-wrapper\">\n            <Moveset label='Legacy Quick Move' moveset={legacyQuickMove} className=\"legacyQuick\" />\n          </div> : null }\n        { legacyChargeMove ? \n          <div className=\"col-10 col-md-4 move-table-wrapper\">\n            <Moveset label='Legacy Charge Move' moveset={legacyChargeMove} className=\"legacyCharge\" />\n          </div> : null }\n        { specialQuickMove ?\n          <div className=\"col-10 col-md-4 move-table-wrapper\">\n            <Moveset label='Special Quick Move' moveset={specialQuickMove} className=\"specialQuick\" />\n          </div> : null }\n        { specialChargeMove && specialChargeMove !== \"Return\" ?\n          <div className=\"col-10 col-md-4 move-table-wrapper\">\n            <Moveset label='Special Charge Move' moveset={specialChargeMove} className=\"specialCharge\" />\n          </div> : null }\n      </div>\n    )\n  }\n}\n\nexport default Pokemon;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Pokemon from './Pokemon/Pokemon';\n//import _ from 'lodash';\nimport JSON from './Static/pokemon-data-full-en-PoGO.json';\n\nimport './App.css';\n\n\nconst completeDataSet = JSON;\n\nlet myDataSet = completeDataSet.filter(\n  obj => obj.field_legacy_charge_moves !== \"\"\n  || obj.field_legacy_quick_moves !== \"\"\n  || (obj.charge_exclusive_moves !== \"\" &&  obj.charge_exclusive_moves !== \"Return\")\n  || obj.quick_exclusive_moves !== \"\"\n  );\n\nclass App extends Component {\n\n  // constructor() {\n  //   super();\n  // }\n\n  componentDidMount() {\n    \n  }\n\n  render() {\n    //console.log(myDataSet);\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Legacy Movesets</h1>\n\n            <nav>\n              <ul className=\"outer-table col-11 col-md-10 col-lg-6 m-auto\">\n                {\n                  myDataSet\n                    .map((mon, index) => {\n                    return (\n                      \n                      <li key={index}>\n                        <Pokemon index={index} currentMon={mon} />\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n            </nav>\n          </header>\n        </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}